{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","formattedResult","setFormattedResult","json","setJson","error","setError","isLoaded","setIsLoaded","apiRequest","console","log","url","document","getElementById","value","fetch","then","res","result","message","JSON","stringify","className","id","type","name","placeholder","autofocus","required","onClick","text","navigator","clipboard","writeText","e","alert","copyToClipboard","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oPA6GeA,MAzGf,WAIE,MAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAYA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAKMC,EAAa,WACjBC,QAAQC,IAAI,+DAEZ,IAAMC,EAAMC,SAASC,eAAe,aAAaC,MAoBjD,OAlBAC,MAAMJ,GACHK,MAAK,SAACC,GAAD,OAASA,EAAIf,UAClBc,MACC,SAACE,GACCX,GAAY,GACZJ,EAAQe,MAKV,SAACd,GACCG,GAAY,GACZF,EAASD,MAIfK,QAAQC,IAAI,+DAERN,EACK,UAAYA,EAAMe,QACfb,EAGHc,KAAKC,UAAUnB,EAAM,KAAM,GAF3B,cAgBX,OACE,sBAAKoB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,kEAGF,uBAAMA,UAAU,WAAhB,UACE,qBAAKA,UAAU,OAAf,SACE,iCACE,uBAAOC,GAAG,YAAV,SACE,uBACEA,GAAG,YACHC,KAAK,MACLC,KAAK,MACLC,YAAY,gCACZC,WAAS,EACTC,UAAQ,MAGZ,uBACEJ,KAAK,SACLV,MAAM,UACNe,QAAS,kBAhFnBpB,QAAQC,IAAI,kCAEZD,QAAQC,IAAI,iBAAmBF,KAE/BP,EAAmBO,UAEnBC,QAAQC,IAAI,0CA8ER,sBAAKY,UAAU,aAAf,UACE,wCACA,0BAAUG,KAAK,GAAGF,GAAG,SAAST,MAAOd,OAEvC,qBAAKuB,GAAG,OAAR,SACE,wBAAQC,KAAK,SAASD,GAAG,SAASM,QAAS,kBAtC3B,WACtB,IAAIC,EAAOlB,SAASC,eAAe,UAAUC,MAC7CiB,UAAUC,UAAUC,UAAUH,GAAMd,MAAK,SAACkB,GACxCC,MAAM,cAmC+CC,IAAjD,wCCxFKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASC,eAAe,SAM1BwB,K","file":"static/js/main.02e12e05.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n// import { useAPIRequest } from './api/useAPIRequest';\n\nfunction App() {\n  /* \n    JSONを取得し、整形、テキストエリアに出力する処理\n  */\n  const [formattedResult, setFormattedResult] = useState('');\n\n  const getFormattedJson = () => {\n    console.log('getFormattedJson: 開始');\n\n    console.log('apiRequest(): ' + apiRequest());\n    // document.getElementById('result').value = apiRequest();\n    setFormattedResult(apiRequest());\n\n    console.log('getFormattedJson: 終了');\n  };\n\n  const [json, setJson] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  /* \n    WebAPIを叩く処理\n  */\n  const apiRequest = () => {\n    console.log('APIリクエスト処理: 開始');\n\n    const url = document.getElementById('url-input').value;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setJson(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n\n    console.log('APIリクエスト処理: 終了');\n\n    if (error) {\n      return 'Error: ' + error.message;\n    } else if (!isLoaded) {\n      return 'Loading...';\n    } else {\n      return JSON.stringify(json, null, 2);\n    }\n  };\n\n  /* \n    コードをクリップボードにコピーする処理\n  */\n  const copyToClipboard = () => {\n    var text = document.getElementById('result').value;\n    navigator.clipboard.writeText(text).then((e) => {\n      alert('Copied!');\n    });\n  };\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <h2>Formatted JSON Response Getter</h2>\n      </header>\n\n      <main className='App-main'>\n        <div className='form'>\n          <form>\n            <label id='url-label'>\n              <input\n                id='url-input'\n                type='url'\n                name='url'\n                placeholder='https://api.xxx.com/users/aaa'\n                autofocus\n                required\n              />\n            </label>\n            <input\n              type='button'\n              value='Request'\n              onClick={() => getFormattedJson()}\n            />\n          </form>\n        </div>\n        <div className='resultArea'>\n          <h2>Result</h2>\n          <textarea name='' id='result' value={formattedResult}></textarea>\n        </div>\n        <div id='copy'>\n          <button type='button' id='button' onClick={() => copyToClipboard()}>\n            Copy to Clipboard\n          </button>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}